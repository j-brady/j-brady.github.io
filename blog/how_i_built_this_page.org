#+TITLE: How I built this website
#+DATE: <2021-12-22 Wed>
#+startup: overview
#+SETUPFILE: ../org-template/style.org
#+OPTIONS: num:nil toc:nil

I built this site using Emacs and Org-Mode. The literate programming capabilities built into Org-Mode with Org-Babel were particularly useful for evaluating and rendering the Python source code blocks. The source code for the web site is also available from my [[https://github.com/j-brady/j-brady.github.io][GitHub]] repo. I have laid out some of the important details for putting the page together below and all source files were rendered using Org-mode's ~#+INCLUDE:~ tag ([[https://orgmode.org/manual/Include-Files.html][see docs]]) ensuring that they are up-to-date.

* Org-Mode
To avoid rendering large blocks of source code and cluttering the pages I implemented a "hacky" solution for collapsible source code blocks using a combination of inline HTML, CSS and JavaScript. This is not ideal but is the best that I could manage without expending too much time.

Above each source block I added the following inline HTML:

#+HTML: <button type="button" class="collapsible">Toggle code</button>
#+begin_src org
#+HTML: <button type="button" class="collapsible">Toggle code</button
#+end_src

#+RESULTS:
: #+HTML: <button type="button" class="collapsible">Toggle code</button

For the case where I wanted all code blocks to be hidden by default I added the following HTML and to the bottom of the org-file.

#+HTML: <button type="button" class="collapsible">Toggle code</button>
#+begin_src org
#+HTML_HEAD: <style> .org-src-container {padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1;} </style>
#+begin_export html
<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
                } else {
                content.style.display = "block";
            }
        });
    }
</script>
#+end_export
#+end_src

In the case where I want the source blocks to be visible by default  (this page) I used the following:

#+HTML: <button type="button" class="collapsible">Toggle code</button>
#+begin_src org
#+begin_export html
<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "none") {
                content.style.display = "block";
                } else {
                content.style.display = "none";
            }
        });
    }
</script>
#+end_export
#+end_src



* Emacs-lisp

The Emacs-lisp code used to publish the web page

#+HTML: <button type="button" class="collapsible">Toggle code</button>
#+INCLUDE: "../publish.el" src emacs-lisp

** Setting relative paths
In order for links to work properly on a server they should be relative. By default Org-mode's ~org-link-file-path-type~ is set to ~'adaptive~ which will convert paths like ~../blog/filename.org~ to absolute paths (not what we want). Therefore, I set this variable to ~'relative~. I also added set this in ~publish.el~... not sure if that is necessary though.

#+begin_src emacs-lisp :results none
(setq org-link-file-path-type 'relative)
#+end_src

* Makefile

Make is a very useful tool! Thanks to John Gosset of introducing it to me!

#+HTML: <button type="button" class="collapsible">Toggle code</button>
#+INCLUDE: "../Makefile" src make

* CSS

The custom CSS code used to style the page is included below. For the collapsible code blocks I used this example from the [[https://www.w3schools.com/howto/howto_js_collapsible.asp][W3 Schools]] website.

#+HTML: <button type="button" class="collapsible">Toggle code</button>
#+INCLUDE: "../static/css/style.css" src css

* Todo
1. Improve collapsible source code block implementation
   - https://alhassy.github.io/org-special-block-extras/ could be a good way to go...
2. Enable syntax highlighting (I think this has something to do with using ~emacs --batch~ see [[*Makefile]])
3. Implement ~target=_blank~ for hyperlinks (presently all links open in the current tab)
* Useful links
 The following resources were extremely useful to me:
- https://orgmode.org/
- https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
- https://opensource.com/article/20/3/blog-emacs

--------------
[[file:../index.org][Back to main page]]
--------------

#+begin_export html
<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "none") {
                content.style.display = "block";
                } else {
                content.style.display = "none";
            }
        });
    }
</script>
#+end_export
